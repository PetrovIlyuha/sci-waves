{"ast":null,"code":"var _jsxFileName = \"D:\\\\Courses Projects In Work\\\\Portfolio\\\\sci-waves\\\\client\\\\pages\\\\auth\\\\password\\\\reset\\\\[token].jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Router, { withRouter } from \"next/router\";\nimport jwt from \"jsonwebtoken\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { API } from \"../../../../config.js\";\nimport Layout from \"../../../../components/Layout\";\n\nconst ResetPassword = ({\n  router\n}) => {\n  console.log(router.query.token);\n  const {\n    0: userState,\n    1: setUserState\n  } = useState({\n    name: \"\",\n    token: \"\",\n    newPassword: \"\",\n    buttonText: \"Reset Password\",\n    success: \"\",\n    error: \"\"\n  });\n  const {\n    name,\n    token,\n    newPassword,\n    buttonText,\n    success,\n    error\n  } = userState;\n  useEffect(() => {\n    const decodedUserData = jwt.decode(router.query.token);\n\n    if (decodedUserData) {\n      setUserState(_objectSpread(_objectSpread({}, userState), {}, {\n        name: decodedUserData.name\n      }));\n    }\n  }, []);\n  useEffect(() => {\n    {\n      success && toast.success(`${success}`, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    }\n    {\n      error && toast.error(`${error}`, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    }\n  }, [success, error]);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, \"Hi, \", name, \"! You may reset password\", __jsx(ToastContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default withRouter(ResetPassword);","map":{"version":3,"sources":["D:/Courses Projects In Work/Portfolio/sci-waves/client/pages/auth/password/reset/[token].jsx"],"names":["useState","useEffect","axios","Router","withRouter","jwt","ToastContainer","toast","API","Layout","ResetPassword","router","console","log","query","token","userState","setUserState","name","newPassword","buttonText","success","error","decodedUserData","decode","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,aAAnC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,SAASC,GAAT,QAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,KAAP,CAAaC,KAAzB;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BjB,QAAQ,CAAC;AACzCkB,IAAAA,IAAI,EAAE,EADmC;AAEzCH,IAAAA,KAAK,EAAE,EAFkC;AAGzCI,IAAAA,WAAW,EAAE,EAH4B;AAIzCC,IAAAA,UAAU,EAAE,gBAJ6B;AAKzCC,IAAAA,OAAO,EAAE,EALgC;AAMzCC,IAAAA,KAAK,EAAE;AANkC,GAAD,CAA1C;AAQA,QAAM;AAAEJ,IAAAA,IAAF;AAAQH,IAAAA,KAAR;AAAeI,IAAAA,WAAf;AAA4BC,IAAAA,UAA5B;AAAwCC,IAAAA,OAAxC;AAAiDC,IAAAA;AAAjD,MAA2DN,SAAjE;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,eAAe,GAAGlB,GAAG,CAACmB,MAAJ,CAAWb,MAAM,CAACG,KAAP,CAAaC,KAAxB,CAAxB;;AACA,QAAIQ,eAAJ,EAAqB;AACnBN,MAAAA,YAAY,iCAAMD,SAAN;AAAiBE,QAAAA,IAAI,EAAEK,eAAe,CAACL;AAAvC,SAAZ;AACD;AACF,GALQ,EAKN,EALM,CAAT;AAOAjB,EAAAA,SAAS,CAAC,MAAM;AACd;AACEoB,MAAAA,OAAO,IACLd,KAAK,CAACc,OAAN,CAAe,GAAEA,OAAQ,EAAzB,EAA4B;AAC1BI,QAAAA,QAAQ,EAAE,WADgB;AAE1BC,QAAAA,SAAS,EAAE,IAFe;AAG1BC,QAAAA,eAAe,EAAE,KAHS;AAI1BC,QAAAA,YAAY,EAAE,IAJY;AAK1BC,QAAAA,YAAY,EAAE,IALY;AAM1BC,QAAAA,SAAS,EAAE,IANe;AAO1BC,QAAAA,QAAQ,EAAEC;AAPgB,OAA5B,CADF;AAUD;AACD;AACEV,MAAAA,KAAK,IACHf,KAAK,CAACe,KAAN,CAAa,GAAEA,KAAM,EAArB,EAAwB;AACtBG,QAAAA,QAAQ,EAAE,WADY;AAEtBC,QAAAA,SAAS,EAAE,IAFW;AAGtBC,QAAAA,eAAe,EAAE,KAHK;AAItBC,QAAAA,YAAY,EAAE,IAJQ;AAKtBC,QAAAA,YAAY,EAAE,IALQ;AAMtBC,QAAAA,SAAS,EAAE,IANW;AAOtBC,QAAAA,QAAQ,EAAEC;AAPY,OAAxB,CADF;AAUD;AACF,GAzBQ,EAyBN,CAACX,OAAD,EAAUC,KAAV,CAzBM,CAAT;AA2BA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACOJ,IADP,8BAEE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CApDD;;AAsDA,eAAed,UAAU,CAACM,aAAD,CAAzB","sourcesContent":["import { useState, useEffect } from \"react\"\r\nimport axios from \"axios\"\r\nimport Router, { withRouter } from \"next/router\"\r\nimport jwt from \"jsonwebtoken\"\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\"\r\nimport { API } from \"../../../../config.js\"\r\nimport Layout from \"../../../../components/Layout\"\r\n\r\nconst ResetPassword = ({ router }) => {\r\n  console.log(router.query.token)\r\n  const [userState, setUserState] = useState({\r\n    name: \"\",\r\n    token: \"\",\r\n    newPassword: \"\",\r\n    buttonText: \"Reset Password\",\r\n    success: \"\",\r\n    error: \"\",\r\n  })\r\n  const { name, token, newPassword, buttonText, success, error } = userState\r\n\r\n  useEffect(() => {\r\n    const decodedUserData = jwt.decode(router.query.token)\r\n    if (decodedUserData) {\r\n      setUserState({ ...userState, name: decodedUserData.name })\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    {\r\n      success &&\r\n        toast.success(`${success}`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        })\r\n    }\r\n    {\r\n      error &&\r\n        toast.error(`${error}`, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        })\r\n    }\r\n  }, [success, error])\r\n\r\n  return (\r\n    <Layout>\r\n      Hi, {name}! You may reset password\r\n      <ToastContainer />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default withRouter(ResetPassword)\r\n"]},"metadata":{},"sourceType":"module"}